# -*- coding: utf-8 -*-
"""Prototipo de diagnóstico médico

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w5xBeBw6cdJ-yxI0rp-ujRlZXp8K8e_x

#*Propuesta 1*
En la siguiente propuesta de prototipo se tiene establecido la lectura por consola la cantidad de sintomas presentes y posterior la identificacion por item de cada uno.
"""

'''
    Creado el 12 de abril de 2023

    Creado por: Briyid Dayana Coy Coy - Código: 1007788684
                Aleixer Alvarado Bernal - Código: 16187291
                Wilmer Alexander Varón Rodríguez - Código: 1013601371

    90169: Inteligencia Artificial
    Grupo: 51
          
    Descripción: Este programa es un prototipo de un diagnóstico médico
    que se basa en la información que el usuario ingrese.
'''
''' 
    Importamos librerias necesarias para el funcionamiento del programa y la predicción
    de la enfermedad del usuario en base a los sintomas que el ingrese, adicionalmente asignamos el método a una variable para su posterior uso.
'''
from sklearn import tree # Libreria para el arbol de decisiones.
arbol_decision = tree.DecisionTreeClassifier() # Variable para el arbol de decisiones.
import numpy as np
""" 
    Creamos las listas que nos van a permitir generar la base de conocimiento, entrenar el modelo y que serán insumo para las posteriores búsquedas lineales que usaremos para la predicción de la enfermedad.

    * sintomas: sintomas que se evaluarán
    * enfermedades: enfermedades posibles que se predecirán en base a los sintomas ingresados por el usuario.
    * descripcion: descripción de cada enfermedad.
    * recomendaciones: serán las arrojadas al usuario en base a la enfermedad que se prediga.
    * tratamiento: será el arrojado usuario en base a la enfermedad que se prediga.
"""
# Base de conocimiento.

# Lista de sintomas, los cuales serán los insumos para la predicción de la enfermedad, se tomaron en cuenta los sintomas generales de las enfermedades digestivas, y los particulares asociadas a la lista de enfermedades.
sintomas = [ 'Sangrado', 'Distensión', 'Estreñimiento', 'Diarrea',
            'Acidez gástrica', 'Incontinencia', 'Náuseas', 'Vómitos',
            'Dolor en el abdomen', 'Problemas para tragar', 'Aumento o pérdida de peso'
            , 'Fiebre', 'Color amarillo en la piel y en la parte blanca de los ojos (ictericia)',
            'Dolor en la parte superior derecha o media del abdomen durante al menos 30 minutos',
            'Heces con sangre', 'Falta de apetito','Dolor abdominal que se irradia hacia la espalda.',
            'Sensibilidad al tocar el abdomen.','Pulso acelerado.','se siente cansado'
            ]

#Lista de enfermedades a predecir.
enfermedades = ['Colecistitis', 'Cálculos Biliares', 'Proctitis', 'Hepatitis B','Intoxicación alimentaria']

# Descripción de las enfermedades.
descripcion = []

# Recomendaciones para cada enfermedad.
recomendaciones = []

# Tratamiento para cada enfermedad.
tratamiento = []

# Matriz de características y etiquetas
X = []
y = []

# Función para mostrar la información de los desarrolladores.
def desarrolladores(): 
    print("")
    print("Software para diagnóstico médico")	
    print("Desarrollado por:\n Briyid Dayana Coy Coy - Código: 1007788684\n Aleixer Alvarado Bernal - Código: 16187291\n Wilmer Alexander Varón Rodríguez - Código: 1013601371")
    print("")

# Método para entrenamiento, en el cual se van a tomar tres sintomas y cuatro sintomas para la predicción
'''
    @arbol_decision: Variable arbol de decisión.
    @prediccion: Listas para hacer la predicción.
'''

def entrenamiento(arbol_decision):
    # Lista de sintomas que se van a tomar para la predicción.

    x = [#incio Colecistitis
        [13, 7, 8], [13, 8, 7], [7, 13, 8], [7, 8, 13], [8, 13, 7], [8, 7, 13],
         #fin Colecistitis
         #inicio Gastroenteritis
         [8, 13, 7], [8, 7, 13], [13, 8, 7], [13, 7, 8], [7, 8, 13], [7, 13, 8],
         #fin Gastroenteritis
         # inicio Intoxicaxion alimentaria
          [3, 6, 7], [3, 7, 6], [6, 3, 7], [6, 7, 3], [7, 3, 6], [7, 6, 3],
          [16, 11, 3], [16, 3, 11], [11, 16, 3], [11, 3, 16], [3, 16, 11], [3, 11, 16],
          [3, 11, 7], [3, 7, 11], [11, 3, 7], [11, 7, 3], [7, 3, 11], [7, 11, 3],
         # fin Intoxicaxion alimentaria
         #inicio Pancreatitis
         [8, 16, 17], [8, 17, 16], [16, 8, 17], [16, 17, 8], [17, 8, 16], [17, 16, 8], 
         [6, 7, 17], [6, 17, 7], [7, 6, 17], [7, 17, 6], [17, 6, 7], [17, 7, 6],
         #fin Pancreatitis
         #inicio Pólipos en el colon
         [0, 14, 19], [0, 19, 14], [14, 0, 19], [14, 19, 0], [19, 0, 14], [19, 14, 0]
         #fin Pólipos en el colon
         ]
    # Lista de enfermedades que se van a tomar para la predicción.
    y =["Colecistitis", "Colecistitis", "Colecistitis", "Colecistitis", "Colecistitis", "Colecistitis",
        "Gastroenteritis","Gastroenteritis", "Gastroenteritis","Gastroenteritis","Gastroenteritis", "Gastroenteritis",         
        'Intoxicación alimentaria','Intoxicación alimentaria','Intoxicación alimentaria','Intoxicación alimentaria',
         'Intoxicación alimentaria','Intoxicación alimentaria','Intoxicación alimentaria','Intoxicación alimentaria',
         'Intoxicación alimentaria','Intoxicación alimentaria','Intoxicación alimentaria','Intoxicación alimentaria',
         'Intoxicación alimentaria','Intoxicación alimentaria','Intoxicación alimentaria','Intoxicación alimentaria',
         'Intoxicación alimentaria','Intoxicación alimentaria',
          'Pancreatitis','Pancreatitis','Pancreatitis','Pancreatitis','Pancreatitis','Pancreatitis','Pancreatitis',
          'Pancreatitis','Pancreatitis','Pancreatitis','Pancreatitis','Pancreatitis',
          'Pólipos en el colon','Pólipos en el colon','Pólipos en el colon','Pólipos en el colon','Pólipos en el colon','Pólipos en el colon'
        ]
    # Entrenamiento del modelo.
    arbolEntrenado = arbol_decision.fit(x,y)
    return arbolEntrenado

arbolEntrenado =entrenamiento(arbol_decision)

def pred_3_sintomas(SintomasPaciente,arbolEntrenado):
    # Predicción de la enfermedad.
    prediccion_enfermedad = arbolEntrenado.predict([SintomasPaciente])
    # Retornamos la predicción.
    return prediccion_enfermedad



def leerSintomas():# generacio de listado de sitomas 
  ListSintom = []
  
  print("Cuales sintomas presentas maximo 3: ")
  for i in range (len(sintomas)):
    print(i+1,sintomas[i],"\n")
  for j in range (3):
    valor=int(input("registra el numero del sintoma: "))-1
    ListSintom.append(valor)
    
  return ListSintom

SintomasPaciente =leerSintomas()# llamado de funcion para leer sintomas 
diagnostico =  pred_3_sintomas(SintomasPaciente,arbolEntrenado) # enviar listado de sintomas y arbol entregado
print("El diagnóstico médico es:", diagnostico) #resultado obtenido segun la prediccion
